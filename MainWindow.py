from autoGeneratedMainWindow import Ui_MainWindow
from PySide6.QtWidgets import QMainWindow, QPushButton
from PySide6.QtCore import QSize
from PySide6.QtGui import QDoubleValidator, QIcon
from PresentGraph import PresentGraph
import math


class MainWindow(QMainWindow, Ui_MainWindow):

    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.show()

        self.numberButtons = []  # Buttons with self.releasedButton func
        self.actionButtons = []  # buttons with math operations
        self.trygoButtons = [] # sin, cos, tan, ctg

        self.setUpButtons()
        self.lastNumber = 0
        self.lastOperand = ''
        self.label.setValidator(QDoubleValidator())

    def buttonReleased(self, a):
        if a == "←":
            self.label.setText(self.label.text().rstrip(self.label.text()[-1]))
            return
        self.label.setText(self.label.text() + a)

    def doThings(self, a):
        self.lastNumber = self.equals(False)
        self.label.setText("")
        self.lastOperand = a

    def sqrt(self):
        #self.lastNumber = self.equals(False) - self.lastNumber
        num = 0
        try:
            temp = self.label.text().replace(",", ".")
            num = math.sqrt(float(temp))
            self.label.setText(str(num))
        except:
            self.ERlabel.setText("ERR, pierwiastek tylko z liczb dodatnich")

    def trygo(self, a):
        num = 0
        try:
            temp = self.label.text().replace(",", ".")

            if a == "sin":
                num = math.sin(float(temp))
            elif a == "cos":
                num = math.cos(float(temp))
            elif a == "tg":
                num = math.tan(float(temp))
            elif a == "ctg":
                num = 1 / math.tan(float(temp))

            self.label.setText(str(num))
        except:
            self.ERlabel.setText("ERR, podano argument z poza dziedziny")


    def equals(self, a):
        self.ERlabel.setText("")
        temp = self.label.text().replace(",", ".")
        num = float(temp)
        output = float(temp)

        if (self.lastOperand == "+"):
            output = num + self.lastNumber
        elif (self.lastOperand == "÷"):
            try:
                output = self.lastNumber / num
            except:
                self.ERlabel.setText("ERR, dzielenie przez 0")
        elif (self.lastOperand == "-"):
            output = self.lastNumber - num
        elif (self.lastOperand == "x"):
            output = self.lastNumber * num
        elif (self.lastOperand == "^"):
            try:
                output = math.pow(self.lastNumber, num)
            except:
                self.ERlabel.setText("ERR, jesli podstawa jest ujemna to wykladnik musi byc calkowity")
        elif (self.lastOperand == "="):
            self.lastNumber = 0

        if (a != False):
            self.label.setText(str(output))
            self.lastOperand = "="

        print(output)
        print(self.lastOperand)
        return output

    def draw(self, text):
        self.graph = PresentGraph(text)


    def groupButtons(self):
        self.numberButtons.append(self.pushButton_0)
        self.numberButtons.append(self.pushButton_1)
        self.numberButtons.append(self.pushButton_2)
        self.numberButtons.append(self.pushButton_3)
        self.numberButtons.append(self.pushButton_4)
        self.numberButtons.append(self.pushButton_5)
        self.numberButtons.append(self.pushButton_6)
        self.numberButtons.append(self.pushButton_7)
        self.numberButtons.append(self.pushButton_8)
        self.numberButtons.append(self.pushButton_9)
        self.numberButtons.append(self.pushButton_dot)
        self.numberButtons.append(self.pushButton_back)

        self.actionButtons.append(self.pushButton_add)
        self.actionButtons.append(self.pushButton_sub)
        self.actionButtons.append(self.pushButton_div)
        self.actionButtons.append(self.pushButton_pow)
        self.actionButtons.append(self.pushButton_x)

        self.trygoButtons.append(self.pushButton_sin)
        self.trygoButtons.append(self.pushButton_cos)
        self.trygoButtons.append(self.pushButton_tg)
        self.trygoButtons.append(self.pushButton_ctg)

    def setUpButtons(self):
        self.groupButtons()
        x: QPushButton
        for x in self.numberButtons:
            x.released.connect(lambda x=x: self.buttonReleased(x.text()))

        for x in self.actionButtons:
            x.released.connect(lambda x=x: self.doThings(x.text()))

        for x in self.trygoButtons:
            x.released.connect(lambda x=x: self.trygo(x.text()))
        self.pushButton_eql.released.connect(lambda: self.equals("="))
        self.pushButton_sqrt.released.connect(self.sqrt)
        self.pushButton_draw_sin.released.connect(lambda: self.draw("sin"))
        self.pushButton_draw_cos.released.connect(lambda: self.draw("cos"))
        self.pushButton_draw_tg.released.connect(lambda: self.draw("tg"))
        self.pushButton_draw_ctg.released.connect(lambda: self.draw("ctg"))



        icon = QIcon()
        icon.addFile(u"./pics/icons8-sin-32.png", QSize(), QIcon.Normal, QIcon.Off)
        self.pushButton_draw_sin.setIcon(icon)
        self.pushButton_draw_sin.setIconSize(QSize(32, 32))

        icon1 = QIcon()
        icon1.addFile(u"./pics/icons8-cos-32.png", QSize(), QIcon.Normal, QIcon.Off)
        self.pushButton_draw_cos.setIcon(icon1)
        self.pushButton_draw_cos.setIconSize(QSize(32, 32))

        icon3 = QIcon()
        icon3.addFile(u"./pics/icons8-tan-32.png", QSize(), QIcon.Normal, QIcon.Off)
        self.pushButton_draw_tg.setIcon(icon3)
        self.pushButton_draw_tg.setIconSize(QSize(32, 32))

        icon4 = QIcon()
        icon4.addFile(u"./pics/icons8-cotangent-24.png", QSize(), QIcon.Normal, QIcon.Off)
        self.pushButton_draw_ctg.setIcon(icon4)
        self.pushButton_draw_ctg.setIconSize(QSize(32, 32))